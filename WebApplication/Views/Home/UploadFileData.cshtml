@using WebApplication.Controllers
@using WebApplication.Services
@model WebApplication.RequestModel.FileDataUploadRequestModel

@functions 
{
    private IEnumerable<SelectListItem> GetAllUsers()
    {
        return HomeService.GetAllUsers();
    }
}

@{
    ViewBag.Title = "UploadFileData";
    Layout = "~/Views/Shared/_Layout.cshtml";
    @Styles.Render("~/Content/HomePage123.css")
    @Scripts.Render("~/Scripts/uploadFile.js")
}



@using (Html.BeginForm("UploadFileData","Home", FormMethod.Post, new { enctype = "multipart/form-data"}))
{
    //@Html.AntiForgeryToken()
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@600&family=Roboto:ital,wght@1,300&display=swap" rel="stylesheet">

    
    <div class="form-horizontal">
        
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        
        <div class="base first-base">
            
            <div class="drop-zone">
                @Html.LabelFor(model => model.FileAsHttpPostedFileBase, htmlAttributes: new {@class = "control-label-drop"})
                <input type="file" class="form-control-uploadfile" name="fileAsHttpPostedFileBase"/> 
                @using (Html.BeginForm("UploadFileData", "Home", FormMethod.Post, new
                {enctype = "multipart/form-data"}))
                {
                    @*@Html.TextBoxFor(m => m.FileAsHttpPostedFileBase, new {@class = "upload-btn-hidden",type = "file"})*@
                    @Html.ValidationMessageFor(m => m.FileAsHttpPostedFileBase)
                }
            </div>
        </div>
        <div class="base second-base">

            <div class="form-group-text">
                @* <input type="text" name="name2" autocomplete="off"> *@
                @Html.TextAreaFor(model => model.SecretMessage, new {onkeyup = "textCounter(this,'counter',50);", id = "message", maxlength = "50", placeholder = "Enter Text To Hide", rows = 10, cols = 40, htmlAttributes = new {@class = "form-control", type = "textarea", name = "name2", autocomplete = "off", id = "name2"}})
                @Html.ValidationMessageFor(model => model.SecretMessage, "", new {@class = "text-danger"})
                @Html.LabelFor(model => model.SecretMessage, htmlAttributes: new {@class = "control-label-text-hide col-md-2"})
                <div class="front">
                    <input disabled maxlength="1" size="1" value="50" id="counter" class="text-counter">
                </div>
                <script>
            function textCounter(field,field2,maxlimit)
            {
             let countfield = document.getElementById(field2);
             if ( field.value.length > maxlimit ) {
              field.value = field.value.substring( 0, maxlimit );
              return false;
             } else {
              countfield.value = maxlimit - field.value.length;
             }
            }
            </script>
            </div>
        </div>


        <div class="base third-base">

            
                @Html.LabelFor(model => model.EncryptionMethod, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.RadioButtonFor(model => model.EncryptionMethod, "Aes", htmlAttributes: new {@class = "radio__input", type = "radio", id = "myRadio1", value = "option1", name = "myRadio"})
                    @Html.LabelFor(model => model.EncryptionMethod, "AES", htmlAttributes: new {@class = "radio__label1", @for = "myRadio1", @type = "radio"})
                    @Html.RadioButtonFor(model => model.EncryptionMethod, "Serpent", htmlAttributes: new {@class = "radio__input", type = "radio", id = "myRadio2", value = "option2", name = "myRadio"})
                    @Html.LabelFor(model => model.EncryptionMethod, "SERPENT", htmlAttributes: new {@class = "radio__label2", @for = "myRadio2", @type = "radio"})
                </div>
            


            
                @Html.LabelFor(model => model.HidingMethod, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.RadioButtonFor(model => model.HidingMethod, "Lsb", htmlAttributes: new {@class = "radio__input", type = "radio", id = "myRadio3", value = "option3", name = "myRadio"})
                    @Html.LabelFor(model => model.HidingMethod, "LSB", htmlAttributes: new {@class = "radio__label3", @for = "myRadio3"})
                    @Html.RadioButtonFor(model => model.HidingMethod, "MetaData", htmlAttributes: new {@class = "radio__input", type = "radio", id = "myRadio4", value = "option1", name = "myRadio"})
                    @Html.LabelFor(model => model.HidingMethod, "METADATA", htmlAttributes: new {@class = "radio__label4", @for = "myRadio4"})
                </div>
            

        </div>

        <div class="base fourth-base">
            
            <div class="select">
                @Html.LabelFor(model => model.PermittedUsers, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10 choose">
                    @Html.EditorFor(model => model.PermittedUsers, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.DropDownListFor(model => model.PermittedUsers, GetAllUsers(), "Choose...", new {@class = "dropdown",})
                    @Html.ValidationMessageFor(model => model.PermittedUsers, "", new {@class = "text-danger"})
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10 uploadbtn">
                    <input type="submit" value="Upload" class="btn btn-default uploadbtn1"/>
                </div>
            </div>
        </div>
    </div>
}